services:
  db:
    container_name: postgres_db
    image: postgres:12.0-alpine
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    container_name: frontend
    build:
      context: ../frontend
      dockerfile: Dockerfile
    volumes:
      - ../frontend/bundles-src:/star-burger/frontend/bundles-src
      - ../backend/bundles:/star-burger/frontend/bundles

  django:
    container_name: django
    build:
      context: ../backend
      dockerfile: Dockerfile
    command: bash entrypoint_stage.sh
    volumes:
      - ../backend:/star-burger/backend
      - ../backend/media:/star-burger/backend/media
      - ../backend/staticfiles:/star-burger/backend/staticfiles
      - ../backend/bundles:/star-burger/frontend/bundles
    environment:
      API_KEY_GEOCODER: ${API_KEY_GEOCODER}
      ROLLBAR_TOKEN: ${ROLLBAR_TOKEN}
      ROLLBAR_INVIRONMENT: ${ROLLBAR_INVIRONMENT}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      DATABASE_URL: ${POSTGRES_DB_URL}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
      frontend:
        condition: service_completed_successfully
    restart: unless-stopped

volumes:
  db_data:


